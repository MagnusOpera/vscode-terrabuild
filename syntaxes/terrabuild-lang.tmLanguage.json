{
  "scopeName": "source.terrabuild.lang",
  "name": "Terrabuild Lang",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#booleans" },
    { "include": "#operators" },
    { "include": "#lists" },
    { "include": "#maps" },
    { "include": "#function-calls" },
    { "include": "#generic-blocks" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        { "name": "comment.line.number-sign", "match": "#.*$" }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            { "name": "constant.character.escape", "match": "\\." },
            {
              "name": "meta.interpolation",
              "begin": "\\${",
              "end": "}",
              "patterns": [
                { "include": "#function-calls" },
                { "include": "#identifiers" },
                { "include": "#numbers" },
                { "include": "#operators" }
              ]
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        { "name": "constant.numeric", "match": "-?\\b\\d+(?:\\.\\d+)?\\b" }
      ]
    },
    "booleans": {
      "patterns": [
        { "name": "constant.language.boolean", "match": "\\b(?:true|false)\\b" },
        { "name": "constant.language.null", "match": "\\bnothing\\b" }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.parameter",
          "match": "\\b[a-zA-Z_@][a-zA-Z0-9_]*(\\.(\\[\"[^\"]+\"]|\\^?[a-zA-Z0-9_]+))*"
        }
      ]
    },
    "lists": {
      "patterns": [
        {
          "name": "meta.sequence",
          "begin": "\\[",
          "end": "\\]",
          "patterns": [
            { "include": "#strings" },
            { "include": "#numbers" },
            { "include": "#booleans" },
            { "include": "#operators" },
            { "include": "#lists" },
            { "include": "#maps" },
            { "include": "#function-calls" },
            { "include": "#identifiers" },
            { "include": "#comments" }
          ]
        }
      ]
    },
    "maps": {
      "patterns": [
        {
          "name": "meta.mapping",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "name": "variable.other.member",
              "match": "\\b[a-zA-Z_][a-zA-Z0-9_.-]*\\b(?=\\s*:)"
            },
            { "name": "punctuation.separator.key-value", "match": ":" },
            { "include": "#strings" },
            { "include": "#numbers" },
            { "include": "#booleans" },
            { "include": "#operators" },
            { "include": "#lists" },
            { "include": "#maps" },
            { "include": "#function-calls" },
            { "include": "#identifiers" },
            { "include": "#function-calls" },
            { "include": "#comments" }
          ]
        }
      ]
    },
    "generic-blocks": {
      "patterns": [
        {
          "name": "meta.block",
          "begin": "\\b([a-zA-Z_@][a-zA-Z0-9_-]*)(\\s+@?[a-zA-Z0-9_.-]+)?\\s*\\{",
          "beginCaptures": {
            "1": { "name": "entity.name.function" },
            "2": { "name": "variable.language" }
          },
          "end": "\\}",
          "patterns": [
            { "include": "#comments" },
            { "include": "#strings" },
            { "include": "#numbers" },
            { "include": "#booleans" },
            { "include": "#operators" },
            { "include": "#lists" },
            { "include": "#maps" },
            { "include": "#function-calls" },
            { "include": "#generic-blocks" },
            { "include": "#identifiers" },
            {
              "name": "variable.parameter",
              "match": "\\b[a-zA-Z_][a-zA-Z0-9_-]*\\b(?=\\s*=)"
            },
            { "name": "keyword.operator.assignment", "match": "=" }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        { "name": "keyword.operator.arithmetic", "match": "\\+|\\-|\\*|\\/" },
        { "name": "keyword.operator.comparison", "match": "==|!=|<=|>=|<|>|~=" },
        { "name": "keyword.operator.logical", "match": "\\?|:|\\?\\?|&&|\\|\\||!" }
      ]
    },
    "function-calls": {
      "patterns": [
        {
          "name": "support.function",
          "match": "\\b(?:trim|upper|lower|replace|count)\\b(?=\\s*\\()"
        },
        {
          "name": "meta.function-call",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*\\("
        }
      ]
    }
  }
}
