{
  "scopeName": "source.terrabuild.lang",
  "name": "Terrabuild Lang",
  "repository": {
    "comments": {
      "patterns": [
        { "name": "comment.line.number-sign", "match": "#.*$" }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            { "name": "constant.character.escape", "match": "\\." },
            {
              "name": "meta.interpolation",
              "begin": "\\${",
              "end": "}",
              "patterns": [
                { "include": "#values" }
              ]
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        { "name": "constant.numeric", "match": "-?\\b\\d+\\b" }
      ]
    },
    "booleans": {
      "patterns": [
        { "name": "constant.language.boolean", "match": "\\b(?:true|false)\\b" },
        { "name": "constant.language.null", "match": "\\bnothing\\b" }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "meta.identifier.chain",
          "begin": "\\b(project|local|var|target|terrabuild)\\b",
          "beginCaptures": {
            "1": { "name": "variable" }
          },
          "end": "(?!\\G)(?=\\s|\\)|\\]|,|$)",
          "patterns": [
            {
              "name": "keyword.operator",
              "match": "\\."
            },
            {
              "name": "variable.other.read",
              "match": "\\^?[a-z](_?[a-z0-9]+)*"
            }
          ]
        }
      ]
    },
    "lists": {
      "patterns": [
        {
          "name": "meta.sequence",
          "begin": "\\[",
          "end": "\\]",
          "patterns": [
            { "include": "#values" }
          ]
        }
      ]
    },
    "maps": {
      "patterns": [
        {
          "name": "meta.mapping",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "name": "variable.other.member",
              "match": "\\b(\\^?[a-z](_?[a-z0-9]+)*)\\b(?=\\s*:)"
            },
            { "name": "punctuation.separator.key-value", "match": ":" },
            { "include": "#values" }
          ]
        }
      ]
    },
    "blocks": {
      "patterns": [
        {
          "name": "meta.block",
          "begin": "(?:\\s*)(@?[a-z](_?[a-z0-9]+)*)(?:\\s+([a-z](_?[a-z0-9]+)*))?\\s*\\{",
          "beginCaptures": {
            "1": { "name": "entity.name.function" },
            "3": { "name": "variable.language" }
          },
          "end": "\\}",
          "patterns": [
            { "include": "#attributes" },
            { "include": "#blocks" }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        { "name": "keyword.operator.arithmetic.add", "match": "\\+" },
        { "name": "keyword.operator.arithmetic.sub", "match": "\\-" },
        { "name": "keyword.operator.arithmetic.mul", "match": "\\*" },
        { "name": "keyword.operator.arithmetic.div", "match": "\\/" },

        { "name": "keyword.operator.comparison.eq", "match": "==" },
        { "name": "keyword.operator.comparison.neq", "match": "!=" },
        { "name": "keyword.operator.comparison.match", "match": "~=" },

        { "name": "keyword.operator.logical.and", "match": "&&" },
        { "name": "keyword.operator.logical.or", "match": "\\|\\|" },
        { "name": "keyword.operator.logical.not", "match": "!" },

        { "name": "keyword.operator.ternary.if", "match": "\\?" },
        { "name": "keyword.operator.ternary.else", "match": ":" },
        { "name": "keyword.operator.nullish.coalesce", "match": "\\?\\?" },

        { "name": "keyword.operator.array.access", "match": "\\.\\[" }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "support.function",
          "match": "\\b(?:trim|upper|lower|replace|count)\\b(?=\\s*\\()"
        }
      ]
    },
    "attributes": {
      "patterns": [
        {
            "name": "variable.parameter",
            "match": "\\b([a-z](_?[a-z0-9]+)*)\\b(?=\\s*=)"
        },
        { "include": "#values" }
      ]
    },
    "grouping": {
      "patterns": [
        {
          "name": "meta.group.expression",
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            { "include": "#values" }
          ]
        }
      ]
    },
    "values": {
      "patterns": [
        { "include": "#grouping" },
        { "include": "#strings" },
        { "include": "#numbers" },
        { "include": "#booleans" },
        { "include": "#operators" },
        { "include": "#lists" },
        { "include": "#maps" },
        { "include": "#functions" },
        { "include": "#identifiers" },
        { "include": "#comments" }
      ]
    }
  }
}
