{
  "scopeName": "source.terrabuild.lang",
  "name": "Terrabuild Lang",
  "patterns": [
    { "include": "#comments" },
    { "include": "#blocks" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        { "name": "comment.line.number-sign", "match": "#.*$" }
      ]
    },
    "data": {
      "patterns": [
        { "name": "variable", "match": "project|local|var|target|terrabuild" }
      ]
    },
    "property": {
      "begin": "\\.(?!\\*)",
      "end": "[[:alpha:]][\\w-]*|\\d*",
      "comment": "Matches traversal attribute access such as .attr",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.accessor"
        }
      },
      "endCaptures": {
        "0": {
          "patterns": [
            {
              "match": "[[:alpha:]][\\w-]*",
              "comment": "Attribute name",
              "name": "variable.other.member"
            }
          ]
        }
      }
    },
    "lists": {
      "patterns": [
        {
          "name": "meta.sequence",
          "begin": "\\[",
          "end": "\\]",
          "patterns": [
            { "include": "#expressions" }
          ]
        }
      ]
    },
    "maps": {
      "patterns": [
        {
          "name": "meta.mapping",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "name": "variable.other.member",
              "match": "\\b(\\^?[a-z](_?[a-z0-9]+)*)\\b(?=\\s*:)"
            },
            { "name": "punctuation.separator.key-value", "match": ":" },
            { "include": "#expressions" }
          ]
        }
      ]
    },
    "blocks": {
        "name": "meta.block",
        "begin": "(@?[a-z](_?[a-z0-9]+)*)(?:\\s+([a-z](_?[a-z0-9]+)*))?\\s*(\\{)",
        "end": "\\}",
        "comment": "This will match Terrabuild blocks",
        "beginCaptures": {
            "1": { "name": "entity.name.function" },
            "3": { "name": "variable.language" },
            "5": { "name": "punctuation.section.block.begin" }
        },
        "endCaptures": {
            "0": { "name": "punctuation.section.block.end" }
        },
        "patterns": [
            { "include": "#comments" },
            { "include": "#attributes" },
            { "include": "#blocks" }
        ]
    },
    "operators": {
      "patterns": [
        { "name": "keyword.operator.arithmetic.add", "match": "\\+" },
        { "name": "keyword.operator.arithmetic.sub", "match": "\\-" },
        { "name": "keyword.operator.arithmetic.mul", "match": "\\*" },
        { "name": "keyword.operator.arithmetic.div", "match": "\\/" },

        { "name": "keyword.operator.comparison.eq", "match": "==" },
        { "name": "keyword.operator.comparison.neq", "match": "!=" },
        { "name": "keyword.operator.comparison.match", "match": "~=" },

        { "name": "keyword.operator.logical.and", "match": "&&" },
        { "name": "keyword.operator.logical.or", "match": "\\|\\|" },
        { "name": "keyword.operator.logical.not", "match": "!" },

        { "name": "keyword.operator.ternary.if", "match": "\\?" },
        { "name": "keyword.operator.ternary.else", "match": ":" },
        { "name": "keyword.operator.nullish.coalesce", "match": "\\?\\?" },

        { "name": "keyword.operator.array.access", "match": "\\.\\[" }
      ]
    },
    "attributes": {
      "name": "meta.attribute.assignment",
      "begin": "([a-z](_?[a-z0-9]+)*)\\s*=",
      "beginCaptures": {
        "1": { "name": "variable.parameter" }
      },
      "end": "(?=,|\\n|\\r|\\})",
      "patterns": [
        {
          "match": "=",
          "name": "keyword.operator.assignment"
        },
        { "include": "#expressions" }
      ]
    },
    "literal_values": {
      "patterns": [
        {
          "include": "#numeric_literals"
        },
        {
          "include": "#language_constants"
        },
        {
          "include": "#string_literals"
        }
      ]
    },
    "numeric_literals": {
      "patterns": [
        {
          "name": "constant.numeric",
          "match": "\\b\\d+\\b",
          "comment": "Integers"
        }
      ]
    },
    "language_constants": {
      "patterns": [
        { "name": "constant.language.boolean", "match": "\\b(?:true|false)\\b" },
        { "name": "constant.language.null", "match": "\\bnothing\\b" }
      ]
    },
    "string_literals": {
      "name": "string.quoted.double",
      "begin": "\"",
      "end": "\"",
      "comment": "Strings",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end"
        }
      },
      "patterns": [
        {
          "include": "#string_interpolation"
        }
      ]
    },
    "string_interpolation": {
      "name": "meta.interpolation",
      "begin": "(?<![%$])([%$]{)",
      "end": "\\}",
      "comment": "String interpolation",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.interpolation.begin"
        }
      },
      "endCaptures": {
        "0": {
          "name": "keyword.other.interpolation.end"
        }
      },
      "patterns": [
        {
          "include": "#expressions"
        }
      ]
    },
    "expressions": {
      "patterns": [
        {
          "include": "#literal_values"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#maps"
        },
        {
          "include": "#lists"
        },
        {
          "include": "#functions"
        },
        {
          "include": "#parens"
        },
        {
          "include": "#data"
        },
        {
          "include": "#property"
        }
      ]
    },
    "parens": {
      "begin": "\\(",
      "end": "\\)",
      "comment": "Parens - matched *after* function syntax",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#expressions"
        }
      ]
    },
    "functions": {
      "name": "meta.function-call",
      "begin": "([:\\-\\w]+)(\\()",
      "end": "\\)",
      "comment": "Built-in function calls",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "match": "\\b(trim|upper|lower|replace|count)\\b",
              "name": "support.function"
            }
          ]
        },
        "2": {
          "name": "punctuation.section.parens.begin"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#expressions"
        }
      ]
    }
  }
}
